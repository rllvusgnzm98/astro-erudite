---
import BlogCard from '@/components/BlogCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Container from '@/components/Container.astro'
import PaginationComponent from '@/components/ui/pagination'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import type { PaginateFunction } from 'astro'
import { type CollectionEntry, getCollection } from 'astro:content'
import Head from '@/components/Head.astro'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allPosts = await getCollection('blog', ({ data }) => !data.draft)
  return paginate(
    allPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf()),
    { pageSize: SITE.POSTS_PER_PAGE },
  )
}

const { page } = Astro.props
const isFirstPage = page.currentPage === 1

const postsByYear = page.data.reduce(
  (acc: Record<string, CollectionEntry<'blog'>[]>, post) => {
    const year = post.data.date.getFullYear().toString()
    ;(acc[year] ??= []).push(post)
    return acc
  },
  {},
)

const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a))
// 第一页的canonical应指向博客主页
const canonicalUrl = page.currentPage === 1
  ? new URL('/blog', Astro.site).toString()
  : undefined; // 其他分页可以不设置，使用当前URL

const pageTitle = `博客 - 第 ${page.currentPage} 页`;
const pageDescription = `所有博客文章 - 第 ${page.currentPage} 页`;
---

<Layout
  title={pageTitle}
  description={pageDescription}
  noindex={!isFirstPage}
  canonicalUrl={canonicalUrl}
>
  <Head 
    title={`博客 - 第 ${page.currentPage} 页 - ${SITE.TITLE}`}
    description={`所有博客文章 - 第 ${page.currentPage} 页`}
    noindex={!isFirstPage}
    canonicalUrl={canonicalUrl}
  />
  
  <Container class="flex grow flex-col gap-y-6">
    <Breadcrumbs
      items={[
        { label: 'Blog', href: '/blog', icon: 'lucide:archive' },
        { label: `Page ${page.currentPage}`, icon: 'lucide:folder-open' },
      ]}
    />

    <div class="flex min-h-[calc(100vh-18rem)] flex-col gap-y-8">
      {
        years.map((year) => (
          <section class="flex flex-col gap-y-4">
            <div class="font-semibold">{year}</div>
            <ul class="not-prose flex flex-col gap-4">
              {postsByYear[year].map((post) => (
                <li>
                  <BlogCard entry={post} />
                </li>
              ))}
            </ul>
          </section>
        ))
      }
    </div>

    <PaginationComponent
      currentPage={page.currentPage}
      totalPages={page.lastPage}
      baseUrl="/blog/"
      client:load
    />
  </Container>
</Layout>
